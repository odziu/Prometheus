using System;

namespace Lab_3_2
{
    public class SortProblem
    {
        //Сортування вибором

        public static void Main()
        {
            Sort();
            Console.ReadLine();
        }

        public static void Sort()
        {
            var a = new[]
            {
                10, 10, 5, 2, 2, 5, 6, 7, 8, 15, 4, 4, 4, 2, 3, 5, 5, 36, 32, 623, 7, 475, 7, 2, 2, 44, 5, 6, 7, 71, 2
            };

            int b = 0;
            
            for (int i = 0; i < a.Length - 1; i++)
            {
                int max1 = i;
                for (int j = i + 1; j < a.Length; j++)
                    if (a[j] > a[max1])
                    {
                        max1 = j;
                    }

                Console.Write("{0}  ", max1); // вывод индексов массива
                b = a[max1];
                a[max1] = a[i];
                a[i] = b;
            }

            Console.WriteLine();

            for (int i = 0; i < a.Length; i++) // вывод самого измененного массива
            {

                Console.Write("{0}  ", a[i]);
            }
        }


        /*
        Сортування вибором

        Напишіть програму, що відсортує заданий масив у порядку спадання за допомогою алгоритму сортування вибором.
        Алгоритм сортування вибором працює таким чином: 
            0. "індекс" = 0 
            1. Знаходить у списку найбільше значення таке, що його позиція дорівнює або більша за "index"(справа від елемента на позиції "індекс") 
            2. Міняє його місцями з елементом масиву на позиції "індекс"
            3. Збільшує "індекс" на 1
            4. Повторює три попередніх кроки, доки масив не завершиться


        Завдання:
        В першому рядку виведіть всі позиції максимального елемента, які Ви отримали на кроці 1.
        (Використовуйте такий запис для виведення Console.Write($"{maxPos} ");).

        В другому рядку виведіть всі елементи відсортованого масиву.
        (Використовуйте такий запис для виведення Console.Write($"{a[i]} ");)


        Розглянемо виконання алгоритму на прикладі: 
            Нехай вхідний масив = [3, 7, 4, 5]
            Будемо міняти елемент на позиції "індекс" == 0
            Максимальний елемент серед елементів масиву починаючи з позиції 0 - 7 на позиції 1(виводимо цю позицію).
            Міняємо елемент на позиції "індекс", з елементом на позиції 1.
            Отримуємо масив [7, 3, 4, 5].
            Збільшуємо "індекс" на 1.

        Будемо міняти елемент на позиції "індекс" == 1
        Максимальний елемент серед елементів масиву починаючи з позиції 1 - 5 на позиції 3(виводимо цю позицію).
        Міняємо елемент на позиції "індекс", з елементом на позиції 3.
        Отримуємо масив [7, 5, 4, 3].
        Збільшуємо "індекс" на 1.

        Будемо міняти елемент на позиції "індекс" == 2
        Максимальний елемент серед елементів масиву починаючи з позиції 2 - 4 на позиції 2(виводимо цю позицію).
        Міняємо елемент на позиції "індекс", з елементом на позиції 2.(Тут міняти елементи не потрібно, адже максимальний елемент вже на правильному місці)
        Отримуємо масив [7, 5, 4, 3].
        Збільшуємо "індекс" на 1.

        Будемо міняти елемент на позиції "індекс" == 3
        Максимальний елемент серед елементів масиву починаючи з позиції 3 - 3 на позиції 3(виводимо цю позицію).
        Міняємо елемент на позиції "індекс", з елементом на позиції 3.(Тут міняти елементи не потрібно, адже максимальний елемент вже на правильному місці)
        Отримуємо масив [7, 5, 4, 3].

        В результаті виконання програми на цьому прикладі результат повинен вийти такий:
            1 3 2 3
            7 5 4 3
        Потрібно зазначити, що алгоритм сортування вибором НЕ є оптимальним(працює не за найменшу кількість кроків) і на практиці його краще не використовувати для великого набору даних.
        Якщо Ви хочете подивитись на оптимальніші(швидші), Ви можете подивитись в сторону таких алгоритмів: merge sort, heap sort, quick sort.
        */
    }
}
